// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/lenguajes/LexerAcciones.jflex

// meta characters:  |  (  )  {  }  [  ]  < >  \  .  *  +  ?  ^  $  / . " ~ !

// codigo antes de la clase lexer
package josq.cms.lenguajes.automatas;

import java.io.Reader;

//import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.DefaultSymbolFactory;

import josq.cms.archivos.MiArchivo;
import josq.cms.lenguajes.automatas.ParserAccionesSym;
import josq.cms.lenguajes.automatas.modelos.jflex.Punto;
import josq.cms.lenguajes.controladores.EjecutarAcciones;


@SuppressWarnings("fallthrough")
public class LexerAcciones implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int MI_ACCION = 2;
  public static final int MI_PARAMETRO = 4;
  public static final int MI_ATRIBUTO = 6;
  public static final int MI_ID = 8;
  public static final int MI_ID_USER = 10;
  public static final int MI_NUMERO = 12;
  public static final int MI_TEXTO = 14;
  public static final int MI_TITULO = 16;
  public static final int MI_ETIQUETA = 18;
  public static final int MIS_ETIQUETAS = 20;
  public static final int MI_COLOR = 22;
  public static final int MI_FECHA = 24;
  public static final int MI_URL = 26;
  public static final int UI_WEB = 28;
  public static final int MI_ALIGN = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     5,  5,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\2\1\3"+
    "\1\4\1\5\2\2\1\0\5\2\1\6\1\7\1\10"+
    "\1\11\11\12\1\7\1\2\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\31\1\47\1\50\1\0\1\51\1\0\1\52"+
    "\1\0\1\53\1\54\1\55\1\56\1\57\1\56\2\31"+
    "\1\60\2\31\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\4\31\1\0\1\74"+
    "\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\26\1\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\11\1\14\0\1\22"+
    "\126\0\1\23\13\0\1\24\6\0\1\25\1\0\1\26"+
    "\1\0\1\27\4\0\1\30\1\31\2\0\1\32\1\33"+
    "\5\0\1\34\4\0\1\35\10\0\1\36\1\0\1\37"+
    "\1\40\2\0\1\41\1\0\1\42\2\0\1\43\1\0"+
    "\1\44\22\0\1\45\1\0\1\46\1\47\1\50\2\0"+
    "\1\51\1\52\1\53\20\0\1\54\1\55\1\56\14\0"+
    "\1\57\1\0\1\60\1\0\1\61\13\0\1\62\1\63"+
    "\1\64\22\0\1\65\7\0\1\66\16\0\1\67\10\0"+
    "\1\70\5\0\1\71\1\0\1\72\1\0\1\73\2\0"+
    "\1\74\3\0\1\75\1\0\1\76\3\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0393"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0393\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u0393\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u0393\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"+
    "\0\u2751\0\u0393\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u0393\0\u28fc\0\u0393\0\u2939\0\u0393\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u0393\0\u0393\0\u2a6a\0\u2aa7\0\u0393\0\u0393\0\u2ae4"+
    "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u0393\0\u2c15\0\u2c52\0\u2c8f"+
    "\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77"+
    "\0\u2eb4\0\u2ef1\0\u0393\0\u2f2e\0\u0393\0\u0393\0\u2f6b\0\u2fa8"+
    "\0\u0393\0\u2fe5\0\u0393\0\u3022\0\u305f\0\u0393\0\u309c\0\u0393"+
    "\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c"+
    "\0\u34a9\0\u34e6\0\u0393\0\u3523\0\u0393\0\u0393\0\u0393\0\u3560"+
    "\0\u359d\0\u0393\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b"+
    "\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3"+
    "\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u0393\0\u0393\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u0393\0\u3d3d\0\u0393\0\u3d7a\0\u0393"+
    "\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62"+
    "\0\u3f9f\0\u3fdc\0\u4019\0\u0393\0\u0393\0\u0393\0\u4056\0\u4093"+
    "\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b"+
    "\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463"+
    "\0\u0393\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e"+
    "\0\u0393\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9"+
    "\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964\0\u0393"+
    "\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c"+
    "\0\u0393\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u0393\0\u4cba"+
    "\0\u0393\0\u4cf7\0\u0393\0\u4d34\0\u4d71\0\u0393\0\u4dae\0\u4deb"+
    "\0\u4e28\0\u0393\0\u4e65\0\u0393\0\u4ea2\0\u4edf\0\u4f1c\0\u0393"+
    "\0\u0393";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\20\1\22\4\20\1\23\2\20\1\24"+
    "\1\25\1\26\32\20\1\27\1\30\1\20\1\31\3\20"+
    "\1\32\5\20\1\33\5\20\1\34\2\20\1\21\1\20"+
    "\1\22\4\20\1\23\2\20\1\24\1\25\1\26\1\20"+
    "\1\35\1\36\12\20\1\37\1\40\13\20\1\27\1\30"+
    "\11\20\1\41\12\20\1\21\1\20\1\22\4\20\1\23"+
    "\2\20\1\24\1\25\1\26\3\20\1\42\2\20\1\43"+
    "\2\20\1\44\6\20\1\45\2\20\1\46\1\47\1\50"+
    "\4\20\1\27\1\30\11\20\1\41\12\20\1\21\1\20"+
    "\1\22\4\20\1\23\2\20\1\24\1\25\1\26\1\20"+
    "\1\51\1\20\1\52\1\20\1\53\11\20\1\54\1\55"+
    "\3\20\1\56\5\20\1\27\1\30\11\20\1\41\12\20"+
    "\1\21\1\20\1\22\1\20\2\57\1\20\1\23\2\20"+
    "\1\24\1\25\1\26\32\20\1\27\1\60\1\57\23\20"+
    "\1\21\1\20\1\22\4\20\1\23\2\20\1\24\1\25"+
    "\1\26\32\20\1\27\1\30\24\20\1\21\1\20\1\22"+
    "\4\20\1\23\1\20\1\61\1\24\1\25\1\26\32\20"+
    "\1\27\1\60\24\20\1\62\1\63\1\22\7\63\1\24"+
    "\1\25\1\26\1\20\31\63\1\27\1\60\22\63\2\20"+
    "\1\21\1\20\1\22\4\20\1\23\2\64\1\24\1\25"+
    "\1\26\1\20\31\64\1\27\1\30\1\20\21\64\2\20"+
    "\1\21\1\20\1\22\4\20\1\23\2\65\1\24\1\25"+
    "\1\26\1\20\31\65\1\27\1\60\1\20\21\65\1\66"+
    "\1\20\1\21\1\20\1\22\1\67\3\20\1\23\2\20"+
    "\1\24\1\25\1\26\32\20\1\27\1\60\24\20\1\21"+
    "\1\20\1\22\4\20\1\23\2\70\1\24\1\25\1\26"+
    "\32\20\1\27\1\60\24\20\1\21\1\20\1\22\3\20"+
    "\4\71\1\24\1\71\1\26\32\71\1\27\1\60\1\20"+
    "\21\71\2\20\1\21\1\20\1\22\4\20\1\23\2\20"+
    "\1\24\1\25\1\26\11\20\1\72\3\20\1\73\2\20"+
    "\1\74\3\20\1\75\1\20\1\76\3\20\1\27\1\60"+
    "\24\20\1\21\1\20\1\22\4\20\1\23\2\20\1\24"+
    "\1\25\1\26\3\20\1\77\1\100\4\20\1\101\1\102"+
    "\17\20\1\27\1\60\23\20\76\0\1\21\150\0\1\103"+
    "\13\0\1\104\74\0\1\105\56\0\1\106\74\0\1\107"+
    "\46\0\1\110\104\0\1\111\74\0\1\112\102\0\1\113"+
    "\115\0\1\114\42\0\1\115\65\0\1\116\73\0\1\117"+
    "\71\0\1\120\104\0\1\121\74\0\1\122\106\0\1\123"+
    "\65\0\1\124\1\0\1\125\75\0\1\126\101\0\1\127"+
    "\72\0\1\130\53\0\1\131\100\0\1\132\56\0\2\57"+
    "\2\0\2\57\4\0\31\57\2\0\22\57\12\0\2\61"+
    "\63\0\1\62\1\63\1\0\7\63\4\0\31\63\2\0"+
    "\22\63\2\0\2\63\1\0\7\63\4\0\31\63\2\0"+
    "\22\63\12\0\2\64\4\0\31\64\3\0\21\64\12\0"+
    "\2\65\4\0\31\65\3\0\21\65\12\0\2\133\4\0"+
    "\6\133\26\0\5\133\26\0\2\134\71\0\4\71\1\0"+
    "\1\71\1\0\32\71\3\0\21\71\34\0\1\135\64\0"+
    "\1\136\70\0\1\137\104\0\1\140\74\0\1\141\70\0"+
    "\1\142\74\0\1\143\120\0\1\144\70\0\1\145\106\0"+
    "\1\146\106\0\1\147\65\0\1\150\103\0\1\151\66\0"+
    "\1\152\53\0\1\153\74\0\1\154\56\0\1\155\75\0"+
    "\1\156\133\0\1\157\31\0\1\160\76\0\1\161\75\0"+
    "\1\162\2\0\1\163\111\0\1\164\74\0\1\165\75\0"+
    "\1\166\60\0\1\167\12\0\1\170\53\0\1\171\105\0"+
    "\1\172\71\0\1\173\74\0\1\174\67\0\1\175\120\0"+
    "\1\176\37\0\2\177\4\0\6\177\26\0\5\177\26\0"+
    "\2\200\101\0\1\201\111\0\1\202\100\0\1\203\76\0"+
    "\1\204\54\0\1\205\106\0\1\206\100\0\1\207\73\0"+
    "\1\210\76\0\1\211\113\0\1\212\74\0\1\213\102\0"+
    "\1\214\61\0\1\215\105\0\1\216\33\0\1\217\111\0"+
    "\1\220\63\0\1\221\111\0\1\222\104\0\1\223\61\0"+
    "\1\224\61\0\1\225\106\0\1\226\63\0\1\227\74\0"+
    "\1\230\110\0\1\231\50\0\1\232\111\0\1\233\103\0"+
    "\1\234\57\0\1\235\103\0\1\236\76\0\1\237\62\0"+
    "\1\240\107\0\1\241\76\0\1\242\43\0\2\243\4\0"+
    "\6\243\26\0\5\243\26\0\2\244\107\0\1\245\112\0"+
    "\1\246\71\0\1\247\77\0\1\250\54\0\1\251\113\0"+
    "\1\252\55\0\1\253\114\0\1\254\73\0\1\255\116\0"+
    "\1\256\64\0\1\257\112\0\1\260\64\0\1\261\101\0"+
    "\1\262\32\0\1\263\66\0\1\264\101\0\1\265\67\0"+
    "\1\266\15\0\1\267\126\0\1\270\30\0\1\271\70\0"+
    "\1\272\100\0\1\273\105\0\1\274\75\0\1\275\71\0"+
    "\1\276\102\0\1\277\57\0\1\300\111\0\1\301\71\0"+
    "\1\302\77\0\1\303\77\0\1\304\54\0\1\305\74\0"+
    "\1\306\106\0\1\307\50\0\2\310\4\0\6\310\26\0"+
    "\5\310\23\0\1\311\111\0\1\312\70\0\1\313\107\0"+
    "\1\314\77\0\1\315\77\0\1\316\55\0\1\317\102\0"+
    "\1\320\74\0\1\321\130\0\1\322\103\0\1\323\61\0"+
    "\1\324\74\0\1\325\34\0\1\326\115\0\1\327\63\0"+
    "\1\330\117\0\1\331\74\0\1\332\101\0\1\333\67\0"+
    "\1\334\41\0\1\335\112\0\1\336\66\0\1\337\64\0"+
    "\1\340\74\0\1\341\100\0\1\342\105\0\1\343\51\0"+
    "\2\344\4\0\6\344\26\0\5\344\26\0\2\345\116\0"+
    "\1\346\64\0\1\347\105\0\1\350\56\0\1\351\103\0"+
    "\1\352\71\0\1\353\75\0\1\354\127\0\1\355\106\0"+
    "\1\356\74\0\1\357\74\0\1\360\43\0\1\361\106\0"+
    "\1\362\43\0\1\363\111\0\1\364\77\0\1\365\54\0"+
    "\1\366\11\0\1\367\76\0\1\370\60\0\1\371\115\0"+
    "\1\372\43\0\2\373\4\0\6\373\26\0\5\373\26\0"+
    "\2\374\117\0\1\375\77\0\1\376\53\0\1\377\115\0"+
    "\1\u0100\63\0\1\u0101\135\0\1\u0102\70\0\1\u0103\63\0"+
    "\1\u0104\110\0\1\u0105\57\0\1\u0106\43\0\1\u0107\14\0"+
    "\1\u0108\2\0\1\u0109\52\0\1\u010a\74\0\1\u010b\104\0"+
    "\1\u010c\105\0\1\u010d\71\0\1\u010e\111\0\1\u010f\51\0"+
    "\1\u0110\64\0\1\u0111\63\0\1\u0112\110\0\1\u0113\73\0"+
    "\1\u0114\143\0\1\u0115\74\0\1\u0116\70\0\1\u0117\31\0"+
    "\1\u0118\110\0\1\u0119\56\0\1\u011a\104\0\1\u011b\105\0"+
    "\1\u011c\61\0\1\u011d\111\0\1\u011e\55\0\1\u011f\73\0"+
    "\1\u0120\73\0\1\u0121\11\0\1\u0122\76\0\1\u0123\100\0"+
    "\1\u0124\44\0\2\u0125\101\0\1\u0126\74\0\1\u0127\145\0"+
    "\1\u0128\41\0\1\u0129\72\0\1\u012a\66\0\1\u012b\111\0"+
    "\1\u012c\104\0\1\u012d\51\0\1\u012e\74\0\1\u012f\64\0"+
    "\1\u0130\104\0\1\u0131\105\0\1\u0132\71\0\1\u0133\73\0"+
    "\1\u0134\51\0\2\u0135\122\0\1\u0136\67\0\1\u0137\77\0"+
    "\1\u0138\65\0\1\u0139\74\0\1\u013a\66\0\1\u013b\14\0"+
    "\1\u013c\72\0\1\u013d\75\0\1\u013e\60\0\1\u013f\77\0"+
    "\1\u0140\73\0\1\u0141\73\0\1\u0142\110\0\1\u0143\73\0"+
    "\1\u0144\73\0\1\u0145\75\0\1\u0146\74\0\1\u0147\56\0"+
    "\1\u0148\74\0\1\u0149\127\0\1\u014a\51\0\1\u014b\74\0"+
    "\1\u014c\64\0\1\u014d\104\0\1\u014e\102\0\1\u014f\73\0"+
    "\1\u0150\57\0\1\u0151\127\0\1\u0152\55\0\1\u0153\66\0"+
    "\1\u0154\114\0\1\u0155\64\0\1\u0156\60\0\1\u0157\74\0"+
    "\1\u0158\77\0\1\u0159\104\0\1\u015a\63\0\1\u015b\116\0"+
    "\1\u015c\65\0\1\u015d\65\0\1\u015e\70\0\1\u015f\105\0"+
    "\1\u0160\57\0\1\u0161\104\0\1\u0162\74\0\1\u0163\70\0"+
    "\1\u0164\105\0\1\u0165\63\0\1\u0166\106\0\1\u0167\73\0"+
    "\1\u0168\60\0\1\u0169\75\0\1\u016a\110\0\1\u016b\60\0"+
    "\1\u016c\107\0\1\u016d\102\0\1\u016e\52\0\1\u016f\110\0"+
    "\1\u0170\57\0\1\u0171\104\0\1\u0172\101\0\1\u0173\57\0"+
    "\1\u0174\117\0\1\u0175\55\0\1\u0176\74\0\1\u0177\106\0"+
    "\1\u0178\60\0\1\u0179\76\0\1\u017a\105\0\1\u017b\74\0"+
    "\1\u017c\67\0\1\u017d\107\0\1\u017e\67\0\1\u017f\62\0"+
    "\1\u0180\105\0\1\u0181\40\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20313];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\1\1\7\11\27\1\1\11\5\1\1\11"+
    "\14\1\14\0\1\11\126\0\1\11\13\0\1\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\2\11\2\0"+
    "\2\11\5\0\1\11\4\0\1\1\10\0\1\11\1\0"+
    "\2\11\2\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\22\0\1\11\1\0\3\11\2\0\1\11\2\1"+
    "\20\0\2\11\1\1\14\0\1\11\1\0\1\11\1\0"+
    "\1\11\13\0\3\11\22\0\1\11\7\0\1\11\16\0"+
    "\1\11\10\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\1\11\3\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LexerAcciones(Reader myReader, DefaultSymbolFactory myFactory) { this(myReader); this.myFactory = myFactory; }

    private DefaultSymbolFactory myFactory = null;

    private Symbol symbol(String name, int sym) {
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(String name, int sym, Object val) {
        int izq = (int)yychar+1;
        int der = (int)yychar+yylength();
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }

    // para errores lexicos
    public Punto getPunto(){ return new Punto(yycolumn, yyline, yylength(), (int)yychar+1); };
    StringBuilder log(String text) 
    {
        EjecutarAcciones.logSintaxis.append(text); 
        return EjecutarAcciones.logSintaxis; 
    }
    
    // para manejo de contextos lexicos
    private boolean accioncEsInpar = false;
    private boolean parametroEsInpar = false;
    private boolean atributoEsInpar = false;

    private void setContextoDe(int sym)
    {
        if(sym == ParserAccionesSym.ACCI)
        { 
            if (accioncEsInpar) { yybegin(YYINITIAL); }
            else { yybegin(MI_ACCION); }
            accioncEsInpar = !accioncEsInpar;
        }
        else if(sym == ParserAccionesSym.PARAM)
        { 
            if (parametroEsInpar) { yybegin(YYINITIAL); }
            else { yybegin(MI_PARAMETRO); }
            parametroEsInpar = !parametroEsInpar;
        }
        else if(sym == ParserAccionesSym.ATRIB)
        { 
            if (atributoEsInpar) { yybegin(YYINITIAL); }
            else { yybegin(MI_ATRIBUTO); }
            atributoEsInpar = !atributoEsInpar;
        }
    }

    /*
    ComplexSymbolFactory myFactory = null;

    public LexerAcciones(Reader in, ComplexSymbolFactory sf) { this(in); myFactory = sf; }

    private Symbol symbol(String name, int sym) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der);
        return mySymbol;
    }
    private Symbol symbol(String name, int sym, Object val) {
        Location izq = new Location(yyline+1, yycolumn+1, (int)yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), (int)yychar+yylength());
        Symbol mySymbol = myFactory.newSymbol(name, sym, izq, der, val);
        return mySymbol;
    }*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAcciones(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserAccionesSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { log("@lexer: ").append(getPunto().toString()).append("\n"); return symbol("",ParserAccionesSym.error);
            }
          // fall through
          case 65: break;
          case 2:
            { 
            }
          // fall through
          case 66: break;
          case 3:
            { return symbol("",ParserAccionesSym.COMI);
            }
          // fall through
          case 67: break;
          case 4:
            { return symbol("",ParserAccionesSym.BARRA);
            }
          // fall through
          case 68: break;
          case 5:
            { return symbol("",ParserAccionesSym.IZQ);
            }
          // fall through
          case 69: break;
          case 6:
            { return symbol("",ParserAccionesSym.IGUAL);
            }
          // fall through
          case 70: break;
          case 7:
            { return symbol("",ParserAccionesSym.DER);
            }
          // fall through
          case 71: break;
          case 8:
            { return symbol("",ParserAccionesSym.IZQCOR);
            }
          // fall through
          case 72: break;
          case 9:
            { return symbol("",ParserAccionesSym.DERCOR);
            }
          // fall through
          case 73: break;
          case 10:
            { return symbol("",ParserAccionesSym.MI_ID, yytext());
            }
          // fall through
          case 74: break;
          case 11:
            { yybegin(YYINITIAL);  return symbol("",ParserAccionesSym.DERCOR);
            }
          // fall through
          case 75: break;
          case 12:
            { return symbol("",ParserAccionesSym.MI_NUMERO, yytext());
            }
          // fall through
          case 76: break;
          case 13:
            { return symbol("",ParserAccionesSym.MI_TEXTO, yytext());
            }
          // fall through
          case 77: break;
          case 14:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.MI_ETIQUETA, yytext());
            }
          // fall through
          case 78: break;
          case 15:
            { return symbol("",ParserAccionesSym.MI_ETIQUETA, yytext());
            }
          // fall through
          case 79: break;
          case 16:
            { return symbol("",ParserAccionesSym.OR);
            }
          // fall through
          case 80: break;
          case 17:
            { return symbol("",ParserAccionesSym.MI_URL, yytext());
            }
          // fall through
          case 81: break;
          case 18:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_ID);
            }
          // fall through
          case 82: break;
          case 19:
            { return symbol("",ParserAccionesSym.UI_MENU);
            }
          // fall through
          case 83: break;
          case 20:
            { yybegin(MI_ETIQUETA); return symbol("",ParserAccionesSym.VALOR);
            }
          // fall through
          case 84: break;
          case 21:
            { yybegin(UI_WEB);   return symbol("",ParserAccionesSym.P_CLASE);
            }
          // fall through
          case 85: break;
          case 22:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_PADRE);
            }
          // fall through
          case 86: break;
          case 23:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_SITIO);
            }
          // fall through
          case 87: break;
          case 24:
            { yybegin(MI_NUMERO);     return symbol("",ParserAccionesSym.A_ANCHO);
            }
          // fall through
          case 88: break;
          case 25:
            { yybegin(MI_COLOR);      return symbol("",ParserAccionesSym.A_COLOR);
            }
          // fall through
          case 89: break;
          case 26:
            { yybegin(MI_ID);         return symbol("",ParserAccionesSym.A_PADRE);
            }
          // fall through
          case 90: break;
          case 27:
            { yybegin(MI_TEXTO);      return symbol("",ParserAccionesSym.A_TEXTO);
            }
          // fall through
          case 91: break;
          case 28:
            { return symbol("",ParserAccionesSym.UI_VIDEO);
            }
          // fall through
          case 92: break;
          case 29:
            { setContextoDe(ParserAccionesSym.ACCI);   return symbol("",ParserAccionesSym.ACCI);
            }
          // fall through
          case 93: break;
          case 30:
            { return symbol("",ParserAccionesSym.NOMBRE);
            }
          // fall through
          case 94: break;
          case 31:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_PAGINA);
            }
          // fall through
          case 95: break;
          case 32:
            { yybegin(MI_TEXTO); return symbol("",ParserAccionesSym.P_TITULO);
            }
          // fall through
          case 96: break;
          case 33:
            { yybegin(MI_NUMERO);     return symbol("",ParserAccionesSym.A_ALTO);
            }
          // fall through
          case 97: break;
          case 34:
            { yybegin(MI_URL);        return symbol("",ParserAccionesSym.A_ORIGEN);
            }
          // fall through
          case 98: break;
          case 35:
            { return symbol("",ParserAccionesSym.UI_IMAGEN);
            }
          // fall through
          case 99: break;
          case 36:
            { return symbol("",ParserAccionesSym.UI_TITULO);
            }
          // fall through
          case 100: break;
          case 37:
            { return symbol("",ParserAccionesSym.MI_COLOR, yytext());
            }
          // fall through
          case 101: break;
          case 38:
            { return symbol("",ParserAccionesSym.UI_PARRAFO);
            }
          // fall through
          case 102: break;
          case 39:
            { return symbol("",ParserAccionesSym.T_CENTRAR);
            }
          // fall through
          case 103: break;
          case 40:
            { return symbol("",ParserAccionesSym.T_DERECHA);
            }
          // fall through
          case 104: break;
          case 41:
            { return symbol("",ParserAccionesSym.ACCIS);
            }
          // fall through
          case 105: break;
          case 42:
            { setContextoDe(ParserAccionesSym.ATRIB);  return symbol("",ParserAccionesSym.ATRIB);
            }
          // fall through
          case 106: break;
          case 43:
            { return symbol("",ParserAccionesSym.ETIQ);
            }
          // fall through
          case 107: break;
          case 44:
            { return symbol("",ParserAccionesSym.ATRIBS);
            }
          // fall through
          case 108: break;
          case 45:
            { return symbol("",ParserAccionesSym.ETIQS);
            }
          // fall through
          case 109: break;
          case 46:
            { setContextoDe(ParserAccionesSym.PARAM);  return symbol("",ParserAccionesSym.PARAM);
            }
          // fall through
          case 110: break;
          case 47:
            { yybegin(MIS_ETIQUETAS); return symbol("",ParserAccionesSym.A_ETIQS);
            }
          // fall through
          case 111: break;
          case 48:
            { return symbol("",ParserAccionesSym.T_IZQUIERDA);
            }
          // fall through
          case 112: break;
          case 49:
            { return symbol("",ParserAccionesSym.PARAMS);
            }
          // fall through
          case 113: break;
          case 50:
            { yybegin(MI_ALIGN);      return symbol("",ParserAccionesSym.A_ALIGN);
            }
          // fall through
          case 114: break;
          case 51:
            { return symbol("",ParserAccionesSym.MI_FECHA, yytext());
            }
          // fall through
          case 115: break;
          case 52:
            { return symbol("",ParserAccionesSym.T_JUSTIFICAR);
            }
          // fall through
          case 116: break;
          case 53:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.PAGE_NEW);
            }
          // fall through
          case 117: break;
          case 54:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.PAGE_DEL);
            }
          // fall through
          case 118: break;
          case 55:
            { yybegin(MI_FECHA); return symbol("",ParserAccionesSym.P_FECHA_NEW);
            }
          // fall through
          case 119: break;
          case 56:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.SITE_NEW);
            }
          // fall through
          case 120: break;
          case 57:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.SITE_DEL);
            }
          // fall through
          case 121: break;
          case 58:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.PAGE_MOD);
            }
          // fall through
          case 122: break;
          case 59:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_USER_NEW);
            }
          // fall through
          case 123: break;
          case 60:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.COMP_DEL);
            }
          // fall through
          case 124: break;
          case 61:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.COMP_NEW);
            }
          // fall through
          case 125: break;
          case 62:
            { yybegin(MI_FECHA); return symbol("",ParserAccionesSym.P_FECHA_MOD);
            }
          // fall through
          case 126: break;
          case 63:
            { yybegin(YYINITIAL); return symbol("",ParserAccionesSym.COMP_MOD);
            }
          // fall through
          case 127: break;
          case 64:
            { yybegin(MI_ID);    return symbol("",ParserAccionesSym.P_USER_MOD);
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
