// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/lenguajes/LexerAcciones.jflex

// meta characters:  |  (  )  {  }  [  ]  < >  \  .  *  +  ?  ^  $  / . " ~ !

// codigo antes de la clase lexer
package josq.cms.lenguajes.lexer;

import java.io.Reader;

//import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
//import java_cup.runtime.*;
import josq.cms.lenguajes.parser.ParserXMLSym;

@SuppressWarnings("fallthrough")
public class LexerAcciones implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int MI_ID = 2;
  public static final int MI_ID_USER = 4;
  public static final int MI_TEXTO = 6;
  public static final int MI_TITULO = 8;
  public static final int MI_ETIQUETA = 10;
  public static final int MIS_ETIQUETAS = 12;
  public static final int MI_NUMERO = 14;
  public static final int MI_COLOR = 16;
  public static final int MI_FECHA = 18;
  public static final int MI_URL = 20;
  public static final int UI_WEB = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5, 
     6,  6,  7,  7,  8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\0\1\2"+
    "\1\3\1\4\10\0\1\5\1\6\1\7\1\10\11\11"+
    "\1\12\1\0\3\2\2\0\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\25\1\43\1\2\1\0"+
    "\1\44\1\0\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\52\1\51\1\25\1\53\1\54\2\25\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\4\25\1\0\1\70\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\2\1\1\2\17\1\1\3\5\1\2\2\1\3"+
    "\2\2\2\1\2\2\5\1\12\0\1\4\23\0\2\2"+
    "\43\0\2\2\43\0\1\2\7\0\1\5\2\0\1\6"+
    "\1\7\12\0\1\10\6\0\1\11\3\0\1\2\16\0"+
    "\1\12\1\0\1\2\42\0\1\2\2\0\1\13\42\0"+
    "\1\14\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u023a\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u023a\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u023a\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u023a\0\u22f5\0\u232e\0\u023a\0\u023a\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u023a"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u023a\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u023a\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e"+
    "\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u2f6d\0\u32fd"+
    "\0\u3336\0\u023a\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4"+
    "\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u023a\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\4\13\1\15\3\13\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\13\1\24\1\25\2\13"+
    "\1\26\1\27\1\30\1\31\2\13\1\32\1\33\1\34"+
    "\4\13\1\35\1\13\1\36\3\13\1\37\4\13\1\40"+
    "\1\13\1\41\5\13\1\42\2\13\1\14\1\15\1\13"+
    "\2\43\1\13\1\15\34\13\1\35\1\43\24\13\1\44"+
    "\1\15\4\13\1\15\2\44\1\13\31\44\1\35\1\13"+
    "\22\44\2\13\1\14\1\15\4\13\1\15\2\45\1\13"+
    "\31\45\1\35\1\13\22\45\2\13\1\14\1\15\4\13"+
    "\1\15\2\46\1\13\31\46\1\35\1\13\22\46\1\15"+
    "\1\13\1\14\1\15\4\13\1\15\1\13\1\47\32\13"+
    "\1\35\25\13\1\14\1\15\1\50\3\13\1\15\34\13"+
    "\1\35\25\13\1\14\1\15\4\13\1\15\2\51\32\13"+
    "\1\35\25\13\1\14\1\15\4\13\1\15\3\13\31\52"+
    "\1\35\1\13\5\52\1\53\14\52\2\13\1\14\1\15"+
    "\4\13\1\15\13\13\1\54\3\13\1\55\2\13\1\56"+
    "\3\13\1\57\1\13\1\60\3\13\1\35\24\13\72\0"+
    "\1\14\110\0\1\61\4\0\1\62\1\0\1\63\71\0"+
    "\1\64\56\0\1\65\6\0\1\66\2\0\1\67\56\0"+
    "\1\70\107\0\1\71\51\0\1\72\67\0\1\73\24\0"+
    "\1\74\64\0\1\75\62\0\1\76\76\0\1\77\65\0"+
    "\1\100\47\0\1\101\100\0\1\102\64\0\1\103\3\0"+
    "\1\104\102\0\1\105\103\0\1\106\14\0\1\107\70\0"+
    "\1\110\63\0\1\111\56\0\1\112\70\0\1\113\26\0"+
    "\2\43\2\0\2\43\1\0\31\43\1\0\23\43\2\0"+
    "\1\44\6\0\2\44\1\0\31\44\2\0\22\44\11\0"+
    "\2\45\1\0\31\45\2\0\22\45\11\0\2\46\1\0"+
    "\31\46\2\0\22\46\11\0\2\47\67\0\2\114\1\0"+
    "\6\114\25\0\5\114\26\0\2\115\65\0\1\116\1\117"+
    "\3\0\31\52\2\0\22\52\7\0\1\116\1\117\3\0"+
    "\31\52\2\0\17\52\1\120\2\52\30\0\1\121\60\0"+
    "\1\122\64\0\1\123\100\0\1\124\70\0\1\125\101\0"+
    "\1\126\57\0\1\127\12\0\1\130\47\0\1\131\107\0"+
    "\1\132\64\0\1\133\53\0\1\134\103\0\1\135\76\0"+
    "\1\136\57\0\1\137\62\0\1\140\106\0\1\141\72\0"+
    "\1\142\51\0\1\143\71\0\1\144\74\0\1\145\63\0"+
    "\1\146\2\0\1\147\105\0\1\150\74\0\1\151\64\0"+
    "\1\152\71\0\1\153\101\0\1\154\103\0\1\155\61\0"+
    "\1\156\72\0\1\157\75\0\1\160\62\0\1\161\23\0"+
    "\2\162\1\0\6\162\25\0\5\162\26\0\2\163\67\0"+
    "\2\164\1\0\31\164\2\0\22\164\10\0\3\117\1\0"+
    "\31\117\2\0\22\117\7\0\1\116\1\117\3\0\31\52"+
    "\2\0\17\52\1\165\2\52\14\0\1\166\105\0\1\167"+
    "\74\0\1\170\72\0\1\171\50\0\1\172\71\0\1\173"+
    "\101\0\1\174\77\0\1\175\53\0\1\176\102\0\1\177"+
    "\72\0\1\200\67\0\1\201\64\0\1\202\56\0\1\203"+
    "\104\0\1\204\57\0\1\205\105\0\1\206\67\0\1\207"+
    "\55\0\1\210\105\0\1\211\51\0\1\212\103\0\1\213"+
    "\57\0\1\214\70\0\1\215\103\0\1\216\71\0\1\217"+
    "\44\0\1\220\131\0\1\221\70\0\1\222\76\0\1\223"+
    "\55\0\1\224\67\0\1\225\102\0\1\226\20\0\2\227"+
    "\1\0\6\227\25\0\5\227\26\0\2\230\65\0\1\116"+
    "\1\117\2\164\1\0\31\164\2\0\22\164\7\0\1\116"+
    "\1\117\3\0\31\52\2\0\13\52\1\231\6\52\22\0"+
    "\1\232\106\0\1\15\65\0\1\233\73\0\1\234\50\0"+
    "\1\235\72\0\1\236\66\0\1\237\105\0\1\240\65\0"+
    "\1\241\52\0\1\242\111\0\1\243\53\0\1\244\105\0"+
    "\1\245\51\0\1\246\112\0\1\247\44\0\1\250\100\0"+
    "\1\251\70\0\1\252\65\0\1\253\63\0\1\254\15\0"+
    "\1\255\56\0\1\256\70\0\1\73\101\0\1\257\71\0"+
    "\1\73\70\0\1\260\65\0\1\216\76\0\1\261\114\0"+
    "\1\262\57\0\1\263\107\0\1\264\65\0\1\265\63\0"+
    "\1\266\75\0\1\267\15\0\2\270\1\0\6\270\25\0"+
    "\5\270\23\0\1\271\71\0\1\116\1\117\2\0\1\272"+
    "\31\52\2\0\16\52\1\273\3\52\20\0\1\274\64\0"+
    "\1\275\103\0\1\235\73\0\1\15\52\0\1\276\70\0"+
    "\1\277\70\0\1\241\111\0\1\300\47\0\1\301\77\0"+
    "\1\302\65\0\1\303\116\0\1\304\42\0\1\305\71\0"+
    "\1\306\73\0\1\307\112\0\1\310\70\0\1\311\53\0"+
    "\1\312\53\0\1\73\100\0\1\313\124\0\1\314\77\0"+
    "\1\315\54\0\1\316\70\0\1\15\70\0\1\317\26\0"+
    "\2\320\1\0\6\320\25\0\5\320\26\0\2\321\66\0"+
    "\1\322\67\0\1\116\1\117\2\0\1\272\31\52\2\0"+
    "\22\52\31\0\1\15\60\0\1\235\104\0\1\323\51\0"+
    "\1\324\120\0\1\325\57\0\1\15\47\0\1\15\113\0"+
    "\1\326\47\0\1\327\11\0\1\330\75\0\1\331\57\0"+
    "\1\332\62\0\1\333\105\0\1\334\73\0\1\335\64\0"+
    "\1\336\111\0\1\337\103\0\1\340\70\0\1\341\70\0"+
    "\1\342\13\0\2\15\1\0\6\15\25\0\5\15\26\0"+
    "\2\343\66\0\1\344\126\0\1\345\46\0\1\346\62\0"+
    "\1\347\14\0\1\334\2\0\1\335\46\0\1\350\111\0"+
    "\1\351\65\0\1\352\55\0\1\302\67\0\1\243\66\0"+
    "\1\353\70\0\1\354\100\0\1\355\112\0\1\356\107\0"+
    "\1\15\64\0\1\357\56\0\1\357\105\0\1\340\12\0"+
    "\1\360\76\0\31\52\2\0\22\52\16\0\1\347\104\0"+
    "\1\274\70\0\1\361\74\0\1\362\52\0\1\363\67\0"+
    "\1\364\106\0\1\365\55\0\1\366\105\0\1\367\47\0"+
    "\1\370\11\0\1\371\51\0\2\372\106\0\1\373\54\0"+
    "\1\374\100\0\1\375\112\0\1\376\46\0\1\377\70\0"+
    "\1\u0100\101\0\1\u0101\65\0\1\u0102\47\0\2\15\111\0"+
    "\1\u0103\53\0\1\u0104\73\0\1\u0105\65\0\1\347\14\0"+
    "\1\334\66\0\1\302\71\0\1\u0106\56\0\1\u0107\67\0"+
    "\1\u0108\103\0\1\u0109\62\0\1\u010a\70\0\1\u010b\112\0"+
    "\1\u010c\36\0\1\u010d\100\0\1\u010e\75\0\1\u010f\71\0"+
    "\1\u0110\54\0\1\363\114\0\1\u0111\44\0\1\u0112\73\0"+
    "\1\u0113\67\0\1\u0114\101\0\1\u0115\57\0\1\u0116\74\0"+
    "\1\u0117\70\0\1\u0118\75\0\1\u0119\54\0\1\15\105\0"+
    "\1\u011a\54\0\1\u0107\111\0\1\u011b\62\0\1\73\57\0"+
    "\1\15\51\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15447];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\17\1\1\11\23\1\12\0"+
    "\1\11\23\0\2\1\43\0\2\1\43\0\1\1\7\0"+
    "\1\11\2\0\2\11\12\0\1\11\6\0\1\11\3\0"+
    "\1\1\16\0\1\11\1\0\1\1\42\0\1\1\2\0"+
    "\1\11\42\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    ComplexSymbolFactory fact = null;

    public LexerAcciones(Reader in, ComplexSymbolFactory sf)
    { this(in); fact = sf; }

    private Symbol symbol(String name, int sym) {
        Location izq = new Location(yyline+1, yycolumn+1,yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), yychar+yylength());
        return fact.newSymbol(name, sym, izq, der);
    }
    private Symbol symbol(String name, int sym, Object val) {
        Location izq = new Location(yyline+1, yycolumn+1,yychar);
        Location der = new Location(yyline+1, yycolumn+yylength(), yychar+yylength());
        return fact.newSymbol(name, sym, izq, der, val);
    }
    private void error(String message) {
        System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
    }



    StringBuffer buff = new StringBuffer();

    void print(String texto){ System.out.print(texto); }
    void print(){ print(yytext()+" "); }
    void cleanBuffer()
    {
        buff.delete(0, buff.length());
        buff.trimToSize();
    }
    String reduceBuffer(String texto)
    {
        buff.append(texto);
        buff.deleteCharAt(buff.length()-1);
        buff.deleteCharAt(0);
        String temp = buff.toString();
        cleanBuffer();
        return temp;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAcciones(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(ParserAccionesSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
          // fall through
          case 13: break;
          case 2:
            { print();
            }
          // fall through
          case 14: break;
          case 3:
            { print(); yybegin(YYINITIAL);
            }
          // fall through
          case 15: break;
          case 4:
            { print(); yybegin(MI_ID);
            }
          // fall through
          case 16: break;
          case 5:
            { print(); yybegin(MI_NUMERO);
            }
          // fall through
          case 17: break;
          case 6:
            { print(); yybegin(UI_WEB);
            }
          // fall through
          case 18: break;
          case 7:
            { print(); yybegin(MI_COLOR);
            }
          // fall through
          case 19: break;
          case 8:
            { print(); yybegin(MI_TEXTO);
            }
          // fall through
          case 20: break;
          case 9:
            { print(); yybegin(MI_ETIQUETA);
            }
          // fall through
          case 21: break;
          case 10:
            { print(); yybegin(MI_URL);
            }
          // fall through
          case 22: break;
          case 11:
            { print(); yybegin(MIS_ETIQUETAS);
            }
          // fall through
          case 23: break;
          case 12:
            { print(); yybegin(MI_FECHA);
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
